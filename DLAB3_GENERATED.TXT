**Problem 1: Road Renovation**  
Time limit: **1.00 s**  Memory limit: **512 MB**

Byteland’s road network has **n** cities and **m** existing roads.  
Each road connects two different cities, and no two roads connect the same pair of cities.  
Unfortunately, some roads are in such poor condition that you must decide which of them to **renovate** so that **every pair of cities becomes reachable** (directly or indirectly).  
Renovating road *i* costs **cᵢ** coins. Your task is to connect the whole country while spending as little money as possible.

---

#### Input
The first line has two integers **n** and **m** — the number of cities and roads.  
The next **m** lines contain three integers **a**, **b**, and **c** (1 ≤ **a**, **b** ≤ **n**, **a** ≠ **b**) — the endpoints of the road and its renovation cost in coins.

---

#### Output
First print a single integer: the **minimum total renovation cost**.  
On the next line print an integer **k**: the number of roads to renovate.  
Then print **k** lines, each containing the two endpoints of a road you decided to renovate. Any optimal solution is accepted.

---

#### Constraints
* 2 ≤ **n** ≤ 2 × 10⁵  
* 1 ≤ **m** ≤ 5 × 10⁵  
* 1 ≤ **c** ≤ 10⁹  
* The given graph may be disconnected.

---

#### Example
```
Input
4 5
1 2 5
2 3 1
3 4 4
4 1 2
2 4 7

Output
8
3
2 3
4 1
3 4
```

---

---

**Problem 2: Teleportation Route**  
Time limit: **1.00 s**  Memory limit: **512 MB**

You are exploring a network of **n** planets connected by **m** bidirectional links.  
Each link is either a **teleport gate** (travel cost 0) or a **flight corridor** (travel cost 1).  
Starting from planet&nbsp;1, you want to reach planet&nbsp;**n** while using the **fewest flight corridors** possible (teleports are free).  
If multiple routes use the same minimal number of flights, any one of them can be reported.

---

#### Input
The first line has two integers **n** and **m** — the number of planets and links.  
Each of the next **m** lines contains three integers **a**, **b**, **t** (1 ≤ **a**, **b** ≤ **n**, **a** ≠ **b**, **t** ∈ {0, 1})  
* **t = 0** means the link is a teleport gate.  
* **t = 1** means the link is a flight corridor.

---

#### Output
If no route exists, print  
```
IMPOSSIBLE
```  
Otherwise, first print an integer **f** — the minimum number of flight corridors on any valid route.  
Next print an integer **k** — the total number of planets on your chosen route.  
Finally print the sequence of those **k** planet numbers in visiting order.

---

#### Constraints
* 2 ≤ **n** ≤ 2 × 10⁵  
* 1 ≤ **m** ≤ 5 × 10⁵  

---

#### Example
```
Input
5 6
1 2 1
2 3 0
3 5 1
1 4 0
4 5 0
2 5 1

Output
1
4
1 4 5
```

(The sample output shows a route 1 → 4 → 5 that uses exactly one flight corridor.)
